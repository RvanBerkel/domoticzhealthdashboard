[{"id":"bb7a483.682dfb8","type":"ui_template","z":"9c6e882a.e957c8","group":"e8eb0b96.ffa298","name":"Web UI","order":0,"width":"16","height":"12","format":"<table ng-if=\"msg.payload.showtable\">\n<tr>\n    <td><B><U>IDX:</U></B></td>\n    <td><B><U>Name:</U></B></td>\n    <td><B><U>Severity:</U></B></td>\n    <td><B><U>Reason:</U></B></td>\n    <td><B><U>Last Seen:</U></B></td>\n</tr>\n  <tr ng-repeat=\"obj in msg.payload.data\">\n    <td>{{ obj.idx }}</td>\n    <td title=\"{{ obj.hovertext }}\">{{ obj.name }}</td>\n    <td>{{ obj.severitylabel }}</td>\n    <td>{{ obj.reason }}</td>\n    <td>{{ obj.lastseen }}</td>\n  </tr>\n</table>\n<h4 ng-if=\"msg.payload.showoffline\">Domoticz is offline</h4>\n<h4 ng-if=\"msg.payload.showincorrectlogin\">Domoticz: incorrect username or password</h4>","storeOutMessages":false,"fwdInMessages":true,"templateScope":"local","x":1320,"y":140,"wires":[[]]},{"id":"c6836faa.2c5f3","type":"function","z":"9c6e882a.e957c8","name":"Find Problems","func":"// Data sets\nfor (i = 0; i < msg.payload.length; i=i+1) {\n    if (msg.payload[i].title == 'Devices'){var devicedata = msg.payload[i]}\n    if (msg.payload[i].title == 'GetLog'){var logdata = msg.payload[i]}\n    if (msg.payload[i].title == 'Hardware'){var hardwaredata = msg.payload[i]}\n    if (msg.payload[i].title == 'OpenZWaveNodes'){var openzwavenodesdata = msg.payload[i]}\n}\n\n// Functions\n// START Check if in array\nfunction isInArray(array, search)\n{return array.indexOf(search) >= 0}\n// END Check if in array\n// START Add data to array\nfunction addtoarray() {\n  array.push({\n      idx:idxlabel,\n      name:namelabel,\n      reason:reason,\n      problemseverity:severitylevel,\n      severitylabel:severitylabel,\n      lastseen:timelabel,\n  });\n}\n// END Add data to array\n\n// Server time\nvar servertime = devicedata.ServerTime.split(/[\\s- :]+/);\nvar serversplitdatetime = new Date(servertime[0],servertime[1]-1,servertime[2],servertime[3],servertime[4],servertime[5]);\nvar servertimestamp = serversplitdatetime.getTime()/1000;\n\n// Setup array\nvar array = [];\n\n// Navigate device data set array\nvar keys = Object.keys(devicedata.result);\nfor(var i =0; i<keys.length;i++){\n    idxlabel = devicedata.result[keys[i]].idx;\n    namelabel = devicedata.result[keys[i]].Name;\n\n  // START Calculate time since device last update\n  objlastupdate = devicedata.result[keys[i]].LastUpdate;\n  if (typeof objlastupdate !== 'undefined' && objlastupdate !== null){\n  var lastupdatetime = objlastupdate.split(/[\\s- :]+/);\n  var lastupdatesplitdatetime = new Date(lastupdatetime[0],lastupdatetime[1]-1,lastupdatetime[2],lastupdatetime[3],lastupdatetime[4],lastupdatetime[5]);\n  var lastupdatetimestamp = lastupdatesplitdatetime.getTime()/1000;\n  var secondssincelastupdate = (servertimestamp - lastupdatetimestamp);\n  var delta = secondssincelastupdate;\n      // calculate (and subtract) whole days\n        var days = Math.floor(delta / 86400);\n        delta -= days * 86400;\n    // calculate (and subtract) whole hours\n        var hours = Math.floor(delta / 3600) % 24;\n        delta -= hours * 3600;\n    // calculate (and subtract) whole minutes\n        var minutes = Math.floor(delta / 60) % 60;\n        delta -= minutes * 60;\n    // what's left is seconds\n        var seconds = delta % 60;\n    if (days == 1){\n        timelabel = days+' day'\n    }else if (days > 1){\n        timelabel = days+' days'\n    }else if (hours == 1 && days === 0){\n        timelabel = hours+' hour'\n    }else if (hours > 1 && days === 0){\n        timelabel = hours+' hours'\n    }else if (minutes == 1 && days === 0 && hours === 0){\n        timelabel = minutes+' minute'\n    }else if (minutes > 1 && days === 0 && hours === 0){\n        timelabel = minutes+' minutes'\n    }else if (seconds == 1 && minutes === 0 && days === 0 && hours === 0){\n        timelabel = seconds+' second'\n    }else if (seconds > 1 && minutes === 0 && days === 0 && hours === 0){\n        timelabel = seconds+' seconds'\n    }else if (seconds === 0 && minutes === 0 && days === 0 && hours === 0){\n        timelabel = seconds+' seconds'\n    }\n    \n  }\n  // END Calculate time since device last update\n  \n  // Variables\n  dname = devicedata.result[keys[i]].Name;\n  hardwaretype = devicedata.result[keys[i]].HardwareType;\n  type = devicedata.result[keys[i]].Type;\n  subtype = devicedata.result[keys[i]].SubType;\n  \n  // START LOW BATTERY\n  objbatterylevel = devicedata.result[keys[i]].BatteryLevel;\n  if (objbatterylevel <= 50 && typeof objbatterylevel !== 'undefined' && objbatterylevel !== null){\n      reason = ('Low battery: ' + devicedata.result[keys[i]].BatteryLevel + '%');\n  // Define severity levels\n  if (objbatterylevel <= 50 && objbatterylevel >= 30){\n      severitylevel=4\n      severitylabel='Low'\n  }else if (objbatterylevel <= 30 && objbatterylevel >= 25){\n      severitylevel=3\n      severitylabel='Medium'\n  }else if (objbatterylevel <= 25 && objbatterylevel >= 20){\n      severitylevel=2\n      severitylabel='High'\n  }else if (objbatterylevel < 20){\n      severitylevel=1\n      severitylabel='Critical'\n  }\n    addtoarray();\n  }\n  // END LOW BATTERY\n  \n  // START LOW SIGNAL\n  objsignallevel = devicedata.result[keys[i]].SignalLevel;\n    if (objsignallevel <= 2 && typeof objsignallevel !== 'undefined' && objsignallevel !== null){\n      reason = ('Low signal: '+objsignallevel);\n    // Define severity levels\n    if (objsignallevel == 2){\n        severitylevel=3\n        severitylabel='Medium'\n    }else if (objsignallevel == 1){\n        severitylevel=2\n        severitylabel='High'\n    }else if (objsignallevel === 0){\n        severitylevel=1\n        severitylabel='Critical'\n    }\n    addtoarray();\n    }\n  // END LOW SIGNAL\n  \n  // START DEVICE MISSING\n    // Get missing device white list\n    var whitelist = flow.get(\"missingwhitelist\");\n\n      if (! isInArray(whitelist, dname) && type !== 'Group'){\n        if (secondssincelastupdate >= 43200 && secondssincelastupdate < 86400){\n            severitylevel=4\n            severitylabel='Low'\n            reason = 'Device missing';\n            addtoarray();\n        }else if (secondssincelastupdate >= 86400 && secondssincelastupdate < 259200){\n            severitylevel=3\n            severitylabel='Medium'\n            reason = 'Device missing';\n            addtoarray();\n        }else if (secondssincelastupdate >= 259200 && secondssincelastupdate < 432000){\n            severitylevel=2\n            severitylabel='High'\n            reason = 'Device missing';\n            addtoarray();\n        }else if (secondssincelastupdate >= 432000){\n            severitylevel=1\n            severitylabel='Critical'\n            reason = 'Device missing';\n            addtoarray();\n        }\n      }\n  // END DEVICE MISSING\n}\n\n// Navigate openzwave data set array (if present)\nif (typeof openzwavenodesdata !== 'undefined' && openzwavenodesdata !== null){\n    var keys = Object.keys(openzwavenodesdata.result);\n    // START Calculate time since device last update    \n    for(var i =0; i<keys.length;i++){\n        // Variables\n        idxlabel = openzwavenodesdata.result[keys[i]].idx;\n        namelabelz = openzwavenodesdata.result[keys[i]].Name;\n        nodeidz = openzwavenodesdata.result[keys[i]].NodeID;\n        descriptionz = openzwavenodesdata.result[keys[i]].Description;\n        productidz = openzwavenodesdata.result[keys[i]].Product_id;\n        producttypez = openzwavenodesdata.result[keys[i]].Product_type;\n        statez = openzwavenodesdata.result[keys[i]].State;\n        \n        // START Z-Wave Node Check Section\n        // START Calculate time since Z-Wave node update\n        objlastupdatez = openzwavenodesdata.result[keys[i]].LastUpdate;\n        if (typeof objlastupdatez !== 'undefined' && objlastupdatez !== null){\n            var lastupdatetimez = objlastupdatez.split(/[\\s- :]+/);\n            var lastupdatesplitdatetimez = new Date(lastupdatetimez[0],lastupdatetimez[1]-1,lastupdatetimez[2],lastupdatetimez[3],lastupdatetimez[4],lastupdatetimez[5]);\n            var lastupdatetimestampz = lastupdatesplitdatetimez.getTime()/1000;\n            var secondssincelastupdatez = (servertimestamp - lastupdatetimestampz);\n            var deltaz = secondssincelastupdatez;\n            // calculate (and subtract) whole days\n            var daysz = Math.floor(deltaz / 86400);\n            deltaz -= daysz * 86400;\n            // calculate (and subtract) whole hours\n            var hoursz = Math.floor(deltaz / 3600) % 24;\n            deltaz -= hoursz * 3600;\n            // calculate (and subtract) whole minutes\n            var minutesz = Math.floor(deltaz / 60) % 60;\n            deltaz -= minutesz * 60;\n            // what's left is seconds\n            var secondsz = deltaz % 60;\n            if (daysz == 1){\n                timelabel = daysz+' day'\n            }else if (daysz > 1){\n                timelabel = daysz+' days'\n            }else if (hoursz == 1 && daysz === 0){\n                timelabel = hoursz+' hour'\n            }else if (hoursz > 1 && daysz === 0){\n                timelabel = hoursz+' hours'\n            }else if (minutesz == 1 && daysz === 0 && hoursz === 0){\n                timelabel = minutesz+' minute'\n            }else if (minutesz > 1 && daysz === 0 && hoursz === 0){\n                timelabel = minutesz+' minutes'\n            }else if (secondsz == 1 && minutesz === 0 && daysz === 0 && hoursz === 0){\n                timelabel = secondsz+' second'\n            }else if (secondsz > 1 && minutesz === 0 && daysz === 0 && hoursz === 0){\n                timelabel = secondsz+' seconds'\n            }else if (secondsz === 0 && minutesz === 0 && daysz === 0 && hoursz === 0){\n                timelabel = secondsz+' seconds'\n            }\n        }\n    // END Calculate time since Z-Wave node update\n        \n        // START Unidentified Z-Wave nodes\n        if (producttypez == '0x0000' && productidz == '0x0000'){\n            severitylevel=1;\n            severitylabel='Critical';\n           namelabel = (namelabelz+' - ('+'Z-Wave node: '+nodeidz+')');\n            reason = 'Unidentified Z-Wave Node';\n            addtoarray();\n        }\n        // END Unidentified Z-Wave nodes\n        \n        // START dead Z-Wave nodes\n        if (statez == 'Dead'){\n            severitylevel=1;\n            severitylabel='Critical';\n           namelabel = (namelabelz+' - ('+'Z-Wave node: '+nodeidz+')');\n            reason = 'Dead Z-wave Node';\n            addtoarray();\n        }\n        // END dead Z-Wave nodes\n        \n    }\n}\n\n\n\n// Sort array by problem severity\narray = array.sort(function(a, b) {return parseFloat(a.problemseverity) - parseFloat(b.problemseverity);});\n\n// Filter objects not part of array\nmsg.payload = {}\n\n// Show table, load array and send\nmsg.payload.showtable = 'yes';\nmsg.payload.data = array;\nreturn msg;","outputs":1,"noerr":0,"x":1160,"y":140,"wires":[["bb7a483.682dfb8"]]},{"id":"4e3c9c43.768164","type":"http request","z":"9c6e882a.e957c8","name":"Get data","method":"GET","ret":"txt","url":"","tls":"","x":460,"y":140,"wires":[["8af3e8d5.b16be8","4fc1526.0a792ac"]]},{"id":"fc703f5d.ef24f","type":"inject","z":"9c6e882a.e957c8","name":"Request","topic":"","payload":"","payloadType":"date","repeat":"15","crontab":"","once":true,"onceDelay":0.1,"x":160,"y":140,"wires":[["bb6393a5.fd553"]]},{"id":"bbbce3a5.af806","type":"json","z":"9c6e882a.e957c8","name":"","property":"payload","action":"","pretty":false,"x":770,"y":140,"wires":[["2fb66a7c.000956","a7a84e79.ed964"]]},{"id":"2fb66a7c.000956","type":"join","z":"9c6e882a.e957c8","name":"Combine into single array","mode":"custom","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"3","count":"","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":950,"y":140,"wires":[["c6836faa.2c5f3"]]},{"id":"bb6393a5.fd553","type":"function","z":"9c6e882a.e957c8","name":"Configuration","func":"// Domoticz Configuration\nserverip='192.168.0.5';\nserverport='443';\nusername='script';\npassword='PASSWORD';\n\n// Missing white list\nwhitelist = [\n    'Kettle',\n    'Kettle Wallmote Switch',\n    'Sonos Liked Music',\n    'Smoothjazz Living Room Wallmote',\n    'Smoothlounge Living Room Wallmote',\n    'Living Room Wallmote Sonos Like',\n    'Test',\n    'Bedroom ZRC90 All Button',\n    'Bedroom ZRC90 Curtain Button',\n    'Bedroom ZRC90 Blind Button',\n    'Bedroom ZRC90 Cat Button',\n    'Bedroom ZRC90 Light Button',\n    'Bedroom ZRC90 Massage Chair Button',\n    'Bedroom ZRC90 Radio Button',\n    'Bedroom ZRC90 Combo Button',\n    'Test Switch',\n    'Wallmote Living Room Blinds Cat mode',\n    'Motion Detection',\n    'Kitty Air Purifier',\n    'Smoothlounge.com',\n    'Smoothjazz.com',\n    'Fox News',\n    'Living Room TV',\n    'Massage Chair',\n    'Main B Air Purifier',\n    'Living Room Xbox',\n    'Main B Humidifier',\n    'Living Room Blinds Cat Mode',\n    'Living Room TV Plex Wallmote Switch',\n    'Living Room Blinds Wallmote Switch',\n    'Living Room Wallmote Motion Detection',\n    'Xiaomi Vacuum',\n    'Living Room Left Blind',\n    'Living Room Right Blind',\n    'Main Bedroom Curtains',\n    'Main Bedroom Blinds',\n    'Office L Blind',\n    'Office R Blind',\n    'Everything',\n    'Ben is Home',\n    'Bens Mobile Phone',\n    'Main Bedroom Door Sensor',\n    'Office Wardrobe Doors',\n    'Main Bedroom L Wardrobe Doors',\n    'Main Bedroom R Wardrobe Doors'\n];\n\n// -------- Don't edit below this line --------\n\n// Data set URLs\nvar urlarray = [\n        '/json.htm?type=devices&filter=all&used=true&order=Name',\n        '/json.htm?type=command&param=getlog&loglevel=2',\n        '/json.htm?type=hardware'\n    ];\n\n// Determine if should use https or not\nif (serverport == '443'){\n    http='https://'\n}else{\n    http='http://'\n}\n\n// Share within the flow\nflow.set(\"configserverip\", serverip);\nflow.set(\"configserverport\", serverport);\nflow.set(\"configusername\", username);\nflow.set(\"configpassword\", password);\nflow.set(\"confighttp\", http);\nflow.set(\"missingwhitelist\", whitelist);\n\n// Pass each url to the http request node\nfor (i = 0; i < urlarray.length; i=i+1) {\nmsg.url = (http+username+':'+password+'@'+serverip+urlarray[i]);\nmsg.rejectUnauthorized = false;\nnode.send(msg);\n}\n\nreturn null;","outputs":1,"noerr":0,"x":310,"y":140,"wires":[["4e3c9c43.768164"]]},{"id":"a7a84e79.ed964","type":"function","z":"9c6e882a.e957c8","name":"Check for Z-Wave","func":"// Retrieve configuration from the flow\nvar serverip = flow.get(\"configserverip\");\nvar serverport = flow.get(\"configserverport\");\nvar username = flow.get(\"configusername\");\nvar password = flow.get(\"configpassword\");\nvar http = flow.get(\"confighttp\");\n\n// Check for OpenZWave via the Hardware json\nif (msg.payload.title == 'Hardware'){\n    for (i = 0; i < msg.payload.result.length; i=i+1) {\n        if (msg.payload.result[i].Type == 21 && msg.payload.result[i].Enabled == 'true' && msg.payload.result[i].NodesQueried === true){\n            var openzwaveidx = msg.payload.result[i].idx;\n            msg.url = (http+username+':'+password+'@'+serverip+':'+serverport+'/json.htm?type=openzwavenodes&idx='+openzwaveidx);\n            msg.rejectUnauthorized = false;\n            node.send(msg);\n        }\n    }\nreturn null;\n}","outputs":1,"noerr":0,"x":490,"y":180,"wires":[["4e3c9c43.768164"]]},{"id":"8af3e8d5.b16be8","type":"function","z":"9c6e882a.e957c8","name":"Check response","func":"// Check http response code\nvar statuscode = msg.statusCode;\n\n// Check if Domoticz is online\nif (statuscode == 200){\nreturn msg;\n}","outputs":1,"noerr":0,"x":620,"y":140,"wires":[["bbbce3a5.af806"]]},{"id":"4fc1526.0a792ac","type":"function","z":"9c6e882a.e957c8","name":"Error handling","func":"// Check http response code\nvar statuscode = msg.statusCode;\n\n// Filter objects not part of array\nmsg.payload = {}\n\n// Check if Domoticz is online\nif (statuscode != 200 && statuscode != 503 && statuscode != 401){\n    msg.payload.showoffline = 'yes';\n    return msg;\n}\n\n// Check if Domoticz login is correct\nif (statuscode == 401 && statuscode != 503 && statuscode != 200){\n    msg.payload.showincorrectlogin = 'yes';\n    return msg;\n}","outputs":1,"noerr":0,"x":700,"y":180,"wires":[["bb7a483.682dfb8"]]},{"id":"e8eb0b96.ffa298","type":"ui_group","z":"","name":"Problems Detected","tab":"568ac77b.1cfab8","disp":true,"width":"16","collapse":false},{"id":"568ac77b.1cfab8","type":"ui_tab","z":"","name":"Domoticz Health","icon":"dashboard"}]
